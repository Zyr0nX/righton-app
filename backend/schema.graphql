input CreateGameInput {
  title: String!
  description: String
  cluster: String
  domain: String
  grade: String
  standard: String
  questions: [CreateQuestionInput]
}

input CreateQuestionInput {
  text: String!
  answer: String!
  imageUrl: String
  instructions: AWSJSON
}

type Game {
  id: Int!
  title: String
  description: String
  cluster: String
  domain: String
  grade: String
  standard: String
  questions: [Question]
  updatedAt: AWSDateTime!
  createdAt: AWSDateTime!
}

input GameSessionInput {
  gameCode: Int
  gameId: Int!
  hintsRevealTime: Int
  id: Int!
  multiDeviceMode: Boolean!
  startedDateTimeUTC: AWSDateTime
  teamIds: [Int]
  votingTime: Int
}

enum GameSessionState {
  CHOOSINGTRICKANSWER
  FINISHED
  INITIALINTRO
  NOTSTARTED
  REVIEWINGRESULT
  VOTING
}

type JoinScreen implements Screen {
  gameID: Int!
  screenID: ScreenID!
  title: String!
  text: String
}

type Mutation {
  deleteGame(id: Int!): Game
  createGame(game: CreateGameInput!): Game
  updateGame(game: UpdateGameInput!): Game
  deleteQuestion(id: Int!): Question
  createQuestion(question: CreateQuestionInput!): Question
  updateQuestion(question: UpdateQuestionInput!): Question
  createGameStatus(gameID: Int!): Screen
  updateGameStatus(gameID: Int!, screenData: ScreenInput!): Screen
}

type Query {
  getGame(id: Int!): Game
  listGames: [Game]
  getQuestion(id: Int!): Question
  listQuestions: [Question]
}

type Question {
  id: Int!
  text: String!
  answer: String!
  imageUrl: String
  instructions: AWSJSON
  updatedAt: AWSDateTime!
  createdAt: AWSDateTime!
}

type QuestionScreen implements Screen {
  gameID: Int!
  screenID: ScreenID!
  title: String!
  text: String
  answers: [String]!
}

type Score {
  teamName: String!
  teamScore: Int!
}

input ScoreInput {
  teamName: String!
  teamScore: Int!
}

type ScorecardScreen implements Screen {
  gameID: Int!
  screenID: ScreenID!
  title: String!
  text: String
  scores: [Score]!
}

interface Screen {
  gameID: Int!
  screenID: ScreenID!
  title: String!
  text: String
}

enum ScreenID {
  JoinScreen
  QuestionScreen
  ScorecardScreen
}

input ScreenInput {
  screenID: ScreenID!
  title: String!
  text: String!
  answers: [String]
  scores: [ScoreInput]
}

type Subscription {
  onCreateGame: Game
    @aws_subscribe(mutations: ["createGame"])
  onCreateQuestion: Question
    @aws_subscribe(mutations: ["createQuestion"])
  subscribeToGameStatusUpdates(gameID: Int!): Screen
    @aws_subscribe(mutations: ["updateGameStatus"])
}

input UpdateGameInput {
  id: Int!
  title: String
  description: String
  cluster: String
  domain: String
  grade: String
  standard: String
}

input UpdateQuestionInput {
  id: Int!
  text: String
  answer: String
  imageUrl: String
  instructions: AWSJSON
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}